// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model student {
  id                  Int              @id @default(autoincrement())
  first_name          String
  last_name           String
  email               String
  password            String
  registration_number Int
  address_id          Int
  dorm_id             Int
  address             address          @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dorm                dorm             @relation(fields: [dorm_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  washing_device      washing_device[]
  reservation         reservation[]
}

model address {
  id            Int        @id @default(autoincrement())
  street        String
  city          String
  county        String
  country       String
  street_number Int
  student       student[]
  building      building[]
  admin         admin[]
}

model dorm {
  id          Int       @id @default(autoincrement())
  student     student[]
  dorm_number String
  dorm_floor  Int
  building_id Int
  building    building  @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model campus {
  id       Int        @id @default(autoincrement())
  name     String
  building building[]
}

model building {
  id         Int       @id @default(autoincrement())
  number     Int
  campus_id  Int
  address_id Int
  address    address   @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campus     campus    @relation(fields: [campus_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  laundry    laundry[]
  dorm       dorm[]
}

model laundry {
  id             Int              @id @default(autoincrement())
  building_id    Int
  building       building         @relation(fields: [building_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  laundry_floor  Int
  washing_device washing_device[]
  reservation    reservation[]
  laundry_name   String
}

model washing_device {
  id          Int           @id @default(autoincrement())
  device_name String
  status      Boolean
  opened      Boolean
  laundry_id  Int
  laundry     laundry       @relation(fields: [laundry_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type        device
  student_id  Int
  student     student       @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservation reservation[]
  smart_plug  smart_plug?
}

model smart_plug {
  id                Int            @id @default(autoincrement())
  name              String
  identifier        Int            @unique
  washing_device_id Int            @unique
  washing_device    washing_device @relation(fields: [washing_device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model power_consumption {
  id             Int      @id @default(autoincrement())
  smart_plug_id  Int
  time           DateTime
  totalStartTime String
  total          Int
  yesterday      Int
  today          Int
  power          Int
  apparentPower  Int
  reactivePower  Int
  factor         Int
  voltage        Int
  current        Int
}

model admin {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String
  address_id Int
  address    address @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model reservation {
  id                Int            @id @default(autoincrement())
  laundry_id        Int
  laudry            laundry        @relation(fields: [laundry_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  washing_device_id Int
  washing_device    washing_device @relation(fields: [washing_device_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservation_date  DateTime
  start_hour        DateTime
  end_hour          DateTime
  scheduled_early   Boolean
  student_id        Int
  student           student        @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model maintenance {
  id                 Int                @id @default(autoincrement())
  washing_device_id  Int
  admin_id           Int
  lastTimeMaintained Int
  maintenance_status maintenance_status
}

enum device {
  WASHING_MACHINE
  TUMBLE_DRYER
}

enum maintenance_status {
  BROKEN
  WORKING
  UNDER_REPAIR
  UNAVAILABLE
}
