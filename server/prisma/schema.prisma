generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model student {
  id                                            Int              @id @default(autoincrement())
  address_id                                    Int
  dorm_id                                       Int
  email                                         String
  first_name                                    String
  last_name                                     String
  registration_number                           Int
  password                                      String
  notification_token                            String           @default("123")
  conversations_conversations_user1_idTostudent conversations[]  @relation("conversations_user1_idTostudent")
  conversations_conversations_user2_idTostudent conversations[]  @relation("conversations_user2_idTostudent")
  messages                                      messages[]
  reservation                                   reservation[]
  address                                       address          @relation(fields: [address_id], references: [id], onDelete: Cascade)
  dorm                                          dorm             @relation(fields: [dorm_id], references: [id], onDelete: Cascade)
  washing_device                                washing_device[]
  notifications                                 notifications[]
}

model address {
  id            Int        @id @default(autoincrement())
  street        String
  city          String
  county        String
  country       String
  street_number Int
  admin         admin[]
  building      building[]
  student       student[]
}

model dorm {
  id          Int       @id @default(autoincrement())
  dorm_number String
  building_id Int
  dorm_floor  Int
  building    building  @relation(fields: [building_id], references: [id], onDelete: Cascade)
  student     student[]
}

model campus {
  id       Int        @id @default(autoincrement())
  name     String
  building building[]
}

model building {
  id         Int       @id @default(autoincrement())
  number     Int
  campus_id  Int
  address_id Int
  address    address   @relation(fields: [address_id], references: [id], onDelete: Cascade)
  campus     campus    @relation(fields: [campus_id], references: [id], onDelete: Cascade)
  dorm       dorm[]
  laundry    laundry[]
}

model laundry {
  id             Int              @id @default(autoincrement())
  building_id    Int
  laundry_floor  Int
  laundry_name   String
  building       building         @relation(fields: [building_id], references: [id], onDelete: Cascade)
  reservation    reservation[]
  washing_device washing_device[]
}

model washing_device {
  id          Int           @id @default(autoincrement())
  status      Boolean
  opened      Boolean
  laundry_id  Int
  type        device
  student_id  Int
  device_name String
  reservation reservation[]
  smart_plug  smart_plug?
  laundry     laundry       @relation(fields: [laundry_id], references: [id], onDelete: Cascade)
  student     student       @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model smart_plug {
  id                Int            @id @default(autoincrement())
  name              String
  identifier        Int            @unique
  washing_device_id Int            @unique
  washing_device    washing_device @relation(fields: [washing_device_id], references: [id], onDelete: Cascade)
}

model power_consumption {
  id             Int      @id @default(autoincrement())
  smart_plug_id  Int
  time           DateTime
  totalStartTime String
  total          Int
  yesterday      Int
  today          Int
  power          Int
  apparentPower  Int
  reactivePower  Int
  factor         Int
  voltage        Int
  current        Int
}

model admin {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  email      String
  address_id Int
  address    address @relation(fields: [address_id], references: [id], onDelete: Cascade)
}

model reservation {
  id                Int            @id @default(autoincrement())
  laundry_id        Int
  washing_device_id Int
  reservation_date  DateTime
  start_hour        DateTime
  end_hour          DateTime
  scheduled_early   Boolean
  student_id        Int
  laudry            laundry        @relation(fields: [laundry_id], references: [id], onDelete: Cascade)
  student           student        @relation(fields: [student_id], references: [id], onDelete: Cascade)
  washing_device    washing_device @relation(fields: [washing_device_id], references: [id], onDelete: Cascade)
}

model maintenance {
  id                 Int                @id @default(autoincrement())
  washing_device_id  Int
  admin_id           Int
  lastTimeMaintained Int
  maintenance_status maintenance_status
}

model conversations {
  id                                      Int        @id @default(autoincrement())
  user1_id                                Int?
  user2_id                                Int?
  student_conversations_user1_idTostudent student?   @relation("conversations_user1_idTostudent", fields: [user1_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student_conversations_user2_idTostudent student?   @relation("conversations_user2_idTostudent", fields: [user2_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages                                messages[]
}

model messages {
  id              Int            @id @default(autoincrement())
  sender_id       Int?
  message         String?
  timestamp       DateTime?      @db.Timestamp(6)
  conversation_id Int?
  conversations   conversations? @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student         student?       @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  id         Int      @id @default(autoincrement())
  title      String
  subtitle   String?
  timestamp  DateTime
  student_id Int
  student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum device {
  WASHING_MACHINE
  TUMBLE_DRYER
}

enum maintenance_status {
  BROKEN
  WORKING
  UNDER_REPAIR
  UNAVAILABLE
}
